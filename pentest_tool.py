import requests
import socket
import ssl
import json
import csv
from bs4 import BeautifulSoup

# Subdomain Enumeration (uses the provided code)
def get_subdomains(domain):
    try:
        response = requests.get(f"http://{domain}")
        soup = BeautifulSoup(response.content, "html.parser")
        subdomains = {link['href'].split("/")[2] for link in soup.find_all("a", href=True) if domain in link['href']}
        if subdomains:
            print(f"[+] Subdomains found: {', '.join(subdomains)}")
        else:
            print("[+] No subdomains found.")
        return list(subdomains)
    except Exception as e:
        print("Error:", e)
        return []

# Port Scanning
def scan_ports(host, start, end):
    open_ports = []
    for port in range(start, end + 1):
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
                sock.settimeout(1)
                if sock.connect_ex((host, port)) == 0:
                    open_ports.append(port)
        except Exception as e:
            continue
    return open_ports

# SSL/TLS Assessment
def check_ssl(host):
    try:
        ssl.get_server_certificate((host, 443))
        return "SSL/TLS certificate is valid"
    except Exception:
        return "SSL/TLS certificate is invalid"

# Directory Brute Forcing
def brute_force_directories(domain):
    common_dirs = ["admin", "login", "dashboard", "config", "uploads", "images", "backup"]
    found_dirs = []
    for directory in common_dirs:
        directory_url = f"http://{domain}/{directory}"
        try:
            response = requests.get(directory_url, timeout=5)
            if response.status_code == 200:
                found_dirs.append(directory_url)
        except requests.RequestException:
            continue
    return found_dirs

# Vulnerability Detection
def check_vulnerabilities(domain):
    missing_headers = []
    try:
        headers = requests.get(f"http://{domain}", timeout=5).headers
        missing = [h for h in ["X-Frame-Options", "X-XSS-Protection", "Strict-Transport-Security", "Content-Security-Policy"] if h not in headers]
        missing_headers = missing if missing else ["No vulnerabilities detected."]
    except requests.RequestException:
        missing_headers = ["Unable to connect to the website."]
    return missing_headers

# Report output function (CSV/JSON)
def save_report(report_data, format_type="json"):
    if format_type == "json":
        with open("report.json", "w") as json_file:
            json.dump(report_data, json_file, indent=4)
        print("[+] Report saved as 'report.json'")
    elif format_type == "csv":
        with open("report.csv", "w", newline="") as csv_file:
            writer = csv.writer(csv_file)
            writer.writerow(["Category", "Details"])
            for category, details in report_data.items():
                if isinstance(details, list):
                    writer.writerow([category, ' '.join(map(str, details))])
                else:
                    writer.writerow([category, details])
        print("[+] Report saved as 'report.csv'")

# Main function to execute all functionalities
def main():
    print("Penetration Testing Tool")
    domain = input("Enter the domain name (e.g., example.com): ").strip()

    # Subdomain Enumeration
    print("\n[+] Starting Subdomain Enumeration...")
    subdomains = get_subdomains(domain)

    # Port Scanning
    host = domain  # Use the domain provided by the user for port scanning as well
    start = int(input("\nEnter starting port: "))
    end = int(input("Enter ending port: "))
    print("\n[+] Starting Port Scanning...")
    open_ports = scan_ports(host, start, end)

    # SSL/TLS Assessment
    print("\n[+] Starting SSL/TLS Assessment...")
    ssl_status = check_ssl(domain)

    # Directory Brute Forcing
    print("\n[+] Starting Directory Brute-Forcing...")
    found_dirs = brute_force_directories(domain)

    # Vulnerability Detection
    print("\n[+] Starting Vulnerability Detection...")
    vulnerabilities = check_vulnerabilities(domain)

    # Compile results
    report_data = {
        "Domain": domain,
        "Subdomains": subdomains,
        "Open Ports": open_ports,
        "SSL/TLS Status": ssl_status,
        "Found Directories": found_dirs,
        "Vulnerabilities": vulnerabilities
    }

    # Print results
    print(f"\n[+] Subdomains found: {subdomains}")
    print(f"[+] Open Ports: {open_ports if open_ports else 'None'}")
    print(f"[+] SSL/TLS Status: {ssl_status}")
    print(f"[+] Found Directories: {found_dirs if found_dirs else 'None'}")
    print(f"[+] Vulnerabilities: {vulnerabilities}")

    # Save report
    save_format = input("\nEnter report format (json/csv): ").strip().lower()
    save_report(report_data, format_type=save_format)

if __name__ == "__main__":
    main()
